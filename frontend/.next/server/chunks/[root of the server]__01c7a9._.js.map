{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/lib/agent-client.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\ninterface ThreadSummary {\n  thread_id: string;\n  message_count: number;\n  last_message: any;\n}\n\nclass AgentClient {\n  private baseUrl: string;\n\n  constructor() {\n    this.baseUrl = process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:8000';\n  }\n\n  // Process a message in a thread\n  async processMessage(message: string, threadId: string) {\n    const response = await fetch(`${this.baseUrl}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        message,\n        thread_id: threadId,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to process message');\n    }\n\n    return response.json();\n  }\n\n  // Create a new thread\n  async createThread() {\n    const threadId = uuidv4();\n    return { threadId };\n  }\n\n  // Get all threads\n  async getThreads() {\n    const response = await fetch(`${this.baseUrl}/threads`, {\n      method: 'GET',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n\n    const data = await response.json();\n    return data.threads;\n  }\n\n  // Get thread history\n  async getThreadHistory(threadId: string) {\n    const response = await fetch(`${this.baseUrl}/threads/${threadId}/history`, {\n      method: 'GET',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch thread history');\n    }\n\n    return response.json();\n  }\n\n  // Delete a thread\n  async deleteThread(threadId: string) {\n    const response = await fetch(`${this.baseUrl}/threads/${threadId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete thread');\n    }\n\n    return response.json();\n  }\n}\n\n// Export a singleton instance\nexport const agentClient = new AgentClient(); "],"names":[],"mappings":";;;AAAA;;AAQA,MAAM;IACI,QAAgB;IAExB,aAAc;QACZ,IAAI,CAAC,OAAO,GAAG,QAAQ,GAAG,CAAC,uBAAuB,IAAI;IACxD;IAEA,gCAAgC;IAChC,MAAM,eAAe,OAAe,EAAE,QAAgB,EAAE;QACtD,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACnD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA,WAAW;YACb;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,SAAS,IAAI;IACtB;IAEA,sBAAsB;IACtB,MAAM,eAAe;QACnB,MAAM,WAAW,CAAA,GAAA,oLAAA,CAAA,KAAM,AAAD;QACtB,OAAO;YAAE;QAAS;IACpB;IAEA,kBAAkB;IAClB,MAAM,aAAa;QACjB,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACtD,QAAQ;QACV;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,KAAK,OAAO;IACrB;IAEA,qBAAqB;IACrB,MAAM,iBAAiB,QAAgB,EAAE;QACvC,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,QAAQ,CAAC,EAAE;YAC1E,QAAQ;QACV;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,SAAS,IAAI;IACtB;IAEA,kBAAkB;IAClB,MAAM,aAAa,QAAgB,EAAE;QACnC,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,EAAE;YAClE,QAAQ;QACV;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,SAAS,IAAI;IACtB;AACF;AAGO,MAAM,cAAc,IAAI"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 136, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/app/api/threads/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { agentClient } from '../../../lib/agent-client';\n\n// GET /api/threads - Get all threads\nexport async function GET() {\n  try {\n    const threads = await agentClient.getThreads();\n    return NextResponse.json({ threads });\n  } catch (error) {\n    console.error('Error fetching threads:', error);\n    return NextResponse.json({ error: 'Failed to fetch threads' }, { status: 500 });\n  }\n}\n\n// POST /api/threads/create - Create a new thread\nexport async function POST() {\n  try {\n    const { threadId } = await agentClient.createThread();\n    return NextResponse.json({ threadId });\n  } catch (error) {\n    console.error('Error creating thread:', error);\n    return NextResponse.json({ error: 'Failed to create thread' }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,wHAAA,CAAA,cAAW,CAAC,UAAU;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAQ;IACrC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,wHAAA,CAAA,cAAW,CAAC,YAAY;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAS;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF"}},
    {"offset": {"line": 174, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}