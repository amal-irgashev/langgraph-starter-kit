{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/app/api/threads/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// GET /api/threads - Get all threads\nexport async function GET() {\n  try {\n    const apiUrl = process.env.NEXT_PUBLIC_API_URL;\n    if (!apiUrl) {\n      throw new Error('API URL is not configured');\n    }\n\n    const response = await fetch(`${apiUrl}/threads`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n\n    const data = await response.json();\n    return NextResponse.json({ threads: data });\n  } catch (error) {\n    console.error('Error fetching threads:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch threads', threads: [] },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/threads - Create a new thread\nexport async function POST() {\n  try {\n    const apiUrl = process.env.NEXT_PUBLIC_API_URL;\n    if (!apiUrl) {\n      throw new Error('API URL is not configured');\n    }\n\n    const response = await fetch(`${apiUrl}/threads/new`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to create thread');\n    }\n\n    const data = await response.json();\n    return NextResponse.json({ thread_id: data.thread_id });\n  } catch (error) {\n    console.error('Error creating thread:', error);\n    return NextResponse.json(\n      { error: 'Failed to create thread' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;;AAAA;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM;QACN,uCAAa;;QAEb;QAEA,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,QAAQ,CAAC,EAAE;YAChD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA2B,SAAS,EAAE;QAAC,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM;QACN,uCAAa;;QAEb;QAEA,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,YAAY,CAAC,EAAE;YACpD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,WAAW,KAAK,SAAS;QAAC;IACvD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}