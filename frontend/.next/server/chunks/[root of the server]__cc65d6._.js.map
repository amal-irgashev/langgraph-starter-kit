{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/app/api/threads/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { v4 as uuidv4 } from 'uuid';\n\n// GET /api/threads - Get all threads\nexport async function GET() {\n  try {\n    const apiUrl = process.env.NEXT_PUBLIC_LANGGRAPH_API_URL;\n    if (!apiUrl) {\n      throw new Error('LangGraph API URL is not configured');\n    }\n\n    const response = await fetch(`${apiUrl}/threads`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n\n    const data = await response.json();\n    return NextResponse.json({ threads: data });\n  } catch (error) {\n    console.error('Error fetching threads:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch threads', threads: [] },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/threads - Create a new thread\nexport async function POST(request: Request) {\n  try {\n    const apiUrl = process.env.NEXT_PUBLIC_LANGGRAPH_API_URL;\n    if (!apiUrl) {\n      throw new Error('LangGraph API URL is not configured');\n    }\n\n    // Get assistant_id from request body\n    const { assistant_id } = await request.json();\n    if (!assistant_id) {\n      return NextResponse.json(\n        { error: 'Assistant ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Generate a new thread ID\n    const thread_id = uuidv4();\n    \n    // Create initial configuration for the thread with LangGraph options\n    const config = {\n      assistant_id,\n      configurable: {\n        thread_id,\n        model: \"gpt-4\",\n        temperature: 0.1,\n      },\n      metadata: {\n        created_at: new Date().toISOString(),\n        version: \"1.0\"\n      }\n    };\n\n    const response = await fetch(`${apiUrl}/threads`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(config),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('Error from LangGraph:', error);\n      throw new Error(`Failed to create thread: ${error}`);\n    }\n\n    return NextResponse.json({ \n      thread_id,\n      config: config.configurable \n    });\n  } catch (error) {\n    console.error('Error creating thread:', error);\n    return NextResponse.json(\n      { \n        error: error instanceof Error ? error.message : 'Failed to create thread',\n        code: 'THREAD_CREATION_FAILED'\n      },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM;QACN,uCAAa;;QAEb;QAEA,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,QAAQ,CAAC,EAAE;YAChD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA2B,SAAS,EAAE;QAAC,GAChD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM;QACN,uCAAa;;QAEb;QAEA,qCAAqC;QACrC,MAAM,EAAE,YAAY,EAAE,GAAG,MAAM,QAAQ,IAAI;QAC3C,IAAI,CAAC,cAAc;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,MAAM,YAAY,CAAA,GAAA,4KAAA,CAAA,KAAM,AAAD;QAEvB,qEAAqE;QACrE,MAAM,SAAS;YACb;YACA,cAAc;gBACZ;gBACA,OAAO;gBACP,aAAa;YACf;YACA,UAAU;gBACR,YAAY,IAAI,OAAO,WAAW;gBAClC,SAAS;YACX;QACF;QAEA,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,QAAQ,CAAC,EAAE;YAChD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,QAAQ,KAAK,CAAC,yBAAyB;YACvC,MAAM,IAAI,MAAM,CAAC,yBAAyB,EAAE,OAAO;QACrD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA,QAAQ,OAAO,YAAY;QAC7B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,MAAM;QACR,GACA;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}