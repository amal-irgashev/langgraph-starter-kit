{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ClientContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, ReactNode, useMemo } from 'react';\nimport { Client } from '@langchain/langgraph-sdk';\n\ninterface ClientContextType {\n  client: Client | null;\n}\n\nconst ClientContext = createContext<ClientContextType>({ client: null });\n\ninterface ClientProviderProps {\n  children: ReactNode;\n  config: {\n    apiUrl: string;\n    apiKey?: string;\n  };\n}\n\nexport function ClientProvider({ children, config }: ClientProviderProps) {\n  // Memoize the client instance to prevent unnecessary re-renders\n  const client = useMemo(() => new Client(config), [config]);\n\n  return (\n    <ClientContext.Provider value={{ client }}>\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useClient() {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within a ClientProvider');\n  }\n  return context.client;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AAHA;;;;AASA,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAqB;IAAE,QAAQ;AAAK;AAU/D,SAAS,eAAe,EAAE,QAAQ,EAAE,MAAM,EAAuB;IACtE,gEAAgE;IAChE,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,iKAAA,CAAA,SAAM,CAAC,SAAS;QAAC;KAAO;IAEzD,qBACE,8OAAC,cAAc,QAAQ;QAAC,OAAO;YAAE;QAAO;kBACrC;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,QAAQ,MAAM;AACvB"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ThreadContext.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Thread } from '@/types/chat';\n\ninterface ThreadContextType {\n  threads: Thread[];\n  currentThreadId: string | null;\n  setCurrentThreadId: (id: string | null) => void;\n  createThread: () => string;\n  loadThreads: () => Promise<void>;\n  isLoading: boolean;\n}\n\nconst ThreadContext = createContext<ThreadContextType | undefined>(undefined);\n\ninterface ThreadProviderProps {\n  children: ReactNode;\n}\n\nexport function ThreadProvider({ children }: ThreadProviderProps) {\n  const [threads, setThreads] = useState<Thread[]>([]);\n  const [currentThreadId, setCurrentThreadId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const loadThreads = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/threads');\n      if (!response.ok) {\n        throw new Error('Failed to fetch threads');\n      }\n      const data = await response.json();\n      if (Array.isArray(data)) {\n        setThreads(data);\n        // If we have threads but no current thread selected, select the first one\n        if (data.length > 0 && !currentThreadId) {\n          setCurrentThreadId(data[0].id);\n        }\n      } else {\n        console.error('Invalid threads data format:', data);\n        setThreads([]);\n      }\n    } catch (error) {\n      console.error('Error loading threads:', error);\n      setThreads([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createThread = () => {\n    try {\n      const newThreadId = crypto.randomUUID();\n      const newThread: Thread = {\n        id: newThreadId,\n        title: 'New Chat',\n        lastMessage: '',\n        timestamp: new Date().toISOString(),\n      };\n      \n      setThreads(prevThreads => {\n        const updatedThreads = Array.isArray(prevThreads) ? prevThreads : [];\n        return [newThread, ...updatedThreads];\n      });\n      \n      setCurrentThreadId(newThreadId);\n      return newThreadId;\n    } catch (error) {\n      console.error('Error creating thread:', error);\n      return '';\n    }\n  };\n\n  useEffect(() => {\n    loadThreads();\n  }, []);\n\n  const value = {\n    threads,\n    currentThreadId,\n    setCurrentThreadId,\n    createThread,\n    loadThreads,\n    isLoading\n  };\n\n  return (\n    <ThreadContext.Provider value={value}>\n      {children}\n    </ThreadContext.Provider>\n  );\n}\n\nexport function useThread() {\n  const context = useContext(ThreadContext);\n  if (!context) {\n    throw new Error('useThread must be used within a ThreadProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAcA,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAiC;AAM5D,SAAS,eAAe,EAAE,QAAQ,EAAuB;IAC9D,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAY,EAAE;IACnD,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACtE,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,MAAM,cAAc;QAClB,aAAa;QACb,IAAI;YACF,MAAM,WAAW,MAAM,MAAM;YAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,MAAM,IAAI,MAAM;YAClB;YACA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,IAAI,MAAM,OAAO,CAAC,OAAO;gBACvB,WAAW;gBACX,0EAA0E;gBAC1E,IAAI,KAAK,MAAM,GAAG,KAAK,CAAC,iBAAiB;oBACvC,mBAAmB,IAAI,CAAC,EAAE,CAAC,EAAE;gBAC/B;YACF,OAAO;gBACL,QAAQ,KAAK,CAAC,gCAAgC;gBAC9C,WAAW,EAAE;YACf;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,WAAW,EAAE;QACf,SAAU;YACR,aAAa;QACf;IACF;IAEA,MAAM,eAAe;QACnB,IAAI;YACF,MAAM,cAAc,OAAO,UAAU;YACrC,MAAM,YAAoB;gBACxB,IAAI;gBACJ,OAAO;gBACP,aAAa;gBACb,WAAW,IAAI,OAAO,WAAW;YACnC;YAEA,WAAW,CAAA;gBACT,MAAM,iBAAiB,MAAM,OAAO,CAAC,eAAe,cAAc,EAAE;gBACpE,OAAO;oBAAC;uBAAc;iBAAe;YACvC;YAEA,mBAAmB;YACnB,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,OAAO;QACT;IACF;IAEA,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR;IACF,GAAG,EAAE;IAEL,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBACE,8OAAC,cAAc,QAAQ;QAAC,OAAO;kBAC5B;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ChatContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { Message, RawMessage } from '@/types/chat';\nimport { useThread } from './ThreadContext';\n\ninterface ChatContextType {\n  messages: Message[];\n  rawMessages: RawMessage[];\n  addMessage: (message: Message) => void;\n  addRawMessage: (message: RawMessage) => void;\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n  streamingContent: string;\n  setStreamingContent: (content: string) => void;\n  clearMessages: () => void;\n  loadThreadMessages: (threadId: string) => Promise<void>;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\nexport function ChatProvider({ children }: ChatProviderProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [rawMessages, setRawMessages] = useState<RawMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [streamingContent, setStreamingContent] = useState<string>('');\n  const { currentThreadId } = useThread();\n\n  const addMessage = (message: Message) => {\n    setMessages((prev) => {\n      if (message.role === 'user') {\n        return [...prev, message];\n      }\n\n      const lastMessage = prev[prev.length - 1];\n      if (lastMessage?.role === 'assistant' && lastMessage?.content === message.content) {\n        return prev;\n      }\n\n      return [...prev, message];\n    });\n  };\n\n  const addRawMessage = (message: RawMessage) => {\n    setRawMessages(prev => [...prev, message]);\n  };\n\n  const clearMessages = () => {\n    setMessages([]);\n    setRawMessages([]);\n    setStreamingContent('');\n  };\n\n  const loadThreadMessages = async (threadId: string) => {\n    try {\n      const response = await fetch(`/api/threads/${threadId}/messages`);\n      const data = await response.json();\n      setMessages(data.messages);\n    } catch (error) {\n      console.error('Error loading thread messages:', error);\n    }\n  };\n\n  // Load messages when thread changes\n  useEffect(() => {\n    if (currentThreadId) {\n      loadThreadMessages(currentThreadId);\n    } else {\n      clearMessages();\n    }\n  }, [currentThreadId]);\n\n  const value = {\n    messages,\n    rawMessages,\n    addMessage,\n    addRawMessage,\n    isLoading,\n    setIsLoading,\n    streamingContent,\n    setStreamingContent,\n    clearMessages,\n    loadThreadMessages\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n}\n\nexport function useChat() {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAEA;AAEA;AAJA;;;;AAmBA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAMxD,SAAS,aAAa,EAAE,QAAQ,EAAqB;IAC1D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IACjE,MAAM,EAAE,eAAe,EAAE,GAAG,CAAA,GAAA,0HAAA,CAAA,YAAS,AAAD;IAEpC,MAAM,aAAa,CAAC;QAClB,YAAY,CAAC;YACX,IAAI,QAAQ,IAAI,KAAK,QAAQ;gBAC3B,OAAO;uBAAI;oBAAM;iBAAQ;YAC3B;YAEA,MAAM,cAAc,IAAI,CAAC,KAAK,MAAM,GAAG,EAAE;YACzC,IAAI,aAAa,SAAS,eAAe,aAAa,YAAY,QAAQ,OAAO,EAAE;gBACjF,OAAO;YACT;YAEA,OAAO;mBAAI;gBAAM;aAAQ;QAC3B;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,eAAe,CAAA,OAAQ;mBAAI;gBAAM;aAAQ;IAC3C;IAEA,MAAM,gBAAgB;QACpB,YAAY,EAAE;QACd,eAAe,EAAE;QACjB,oBAAoB;IACtB;IAEA,MAAM,qBAAqB,OAAO;QAChC,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,CAAC,aAAa,EAAE,SAAS,SAAS,CAAC;YAChE,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,YAAY,KAAK,QAAQ;QAC3B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,kCAAkC;QAClD;IACF;IAEA,oCAAoC;IACpC,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,iBAAiB;YACnB,mBAAmB;QACrB,OAAO;YACL;QACF;IACF,GAAG;QAAC;KAAgB;IAEpB,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAC1B;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}