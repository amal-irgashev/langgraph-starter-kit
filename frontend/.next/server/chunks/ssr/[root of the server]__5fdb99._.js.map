{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ClientContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, ReactNode, useMemo } from 'react';\nimport { Client } from '@langchain/langgraph-sdk';\n\ninterface ClientContextType {\n  client: Client | null;\n}\n\nconst ClientContext = createContext<ClientContextType>({ client: null });\n\ninterface ClientProviderProps {\n  children: ReactNode;\n  config: {\n    apiUrl: string;\n    apiKey?: string;\n  };\n}\n\nexport function ClientProvider({ children, config }: ClientProviderProps) {\n  // Memoize the client instance to prevent unnecessary re-renders\n  const client = useMemo(() => new Client(config), [config]);\n\n  return (\n    <ClientContext.Provider value={{ client }}>\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useClient() {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within a ClientProvider');\n  }\n  return context.client;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AAHA;;;;AASA,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAqB;IAAE,QAAQ;AAAK;AAU/D,SAAS,eAAe,EAAE,QAAQ,EAAE,MAAM,EAAuB;IACtE,gEAAgE;IAChE,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,iKAAA,CAAA,SAAM,CAAC,SAAS;QAAC;KAAO;IAEzD,qBACE,8OAAC,cAAc,QAAQ;QAAC,OAAO;YAAE;QAAO;kBACrC;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,QAAQ,MAAM;AACvB"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ChatContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { Message, RawMessage } from '@/types/chat';\nimport { useEventSource } from '@/hooks/useEventSource';\n\ninterface ChatContextType {\n  messages: Message[];\n  rawMessages: RawMessage[];\n  isLoading: boolean;\n  streamingContent: string;\n  addMessage: (message: Message) => void;\n  addRawMessage: (message: RawMessage) => void;\n  setIsLoading: (loading: boolean) => void;\n  setStreamingContent: (content: string) => void;\n  clearRawMessages: () => void;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport function ChatProvider({ children }: { children: React.ReactNode }) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [rawMessages, setRawMessages] = useState<RawMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [streamingContent, setStreamingContent] = useState('');\n\n  const addMessage = useCallback((message: Message) => {\n    setMessages(prev => [...prev, message]);\n  }, []);\n\n  const addRawMessage = useCallback((message: RawMessage) => {\n    setRawMessages(prev => [...prev, message]);\n  }, []);\n\n  const clearRawMessages = useCallback(() => {\n    setRawMessages([]);\n  }, []);\n\n  const value = {\n    messages,\n    rawMessages,\n    isLoading,\n    streamingContent,\n    addMessage,\n    addRawMessage,\n    setIsLoading,\n    setStreamingContent,\n    clearRawMessages,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n}\n\nexport function useChat() {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAkBA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEzD,MAAM,aAAa,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QAC9B,YAAY,CAAA,OAAQ;mBAAI;gBAAM;aAAQ;IACxC,GAAG,EAAE;IAEL,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,CAAC;QACjC,eAAe,CAAA,OAAQ;mBAAI;gBAAM;aAAQ;IAC3C,GAAG,EAAE;IAEL,MAAM,mBAAmB,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE;QACnC,eAAe,EAAE;IACnB,GAAG,EAAE;IAEL,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT"}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ThreadContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useCallback, useEffect, useRef } from 'react';\nimport { Thread, ThreadContextType, ThreadSummary, Message } from '@/types/chat';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst ThreadContext = createContext<ThreadContextType | undefined>(undefined);\n\nexport function ThreadProvider({ children }: { children: React.ReactNode }) {\n  const [threads, setThreads] = useState<Thread[]>([]);\n  const [currentThreadId, setCurrentThreadId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    const wsUrl = process.env.NEXT_PUBLIC_LANGGRAPH_API_URL?.replace('http', 'ws') || 'ws://localhost:8123';\n    wsRef.current = new WebSocket(wsUrl);\n\n    wsRef.current.onopen = () => {\n      console.log('WebSocket connected');\n      loadThreads();\n    };\n\n    wsRef.current.onclose = () => {\n      console.log('WebSocket disconnected');\n    };\n\n    return () => {\n      wsRef.current?.close();\n    };\n  }, []);\n\n  const createNewThread = async () => {\n    setIsLoading(true);\n    try {\n      const thread_id = uuidv4();\n      const newThread: Thread = {\n        id: thread_id,\n        title: `Chat ${threads.length + 1}`,\n        lastMessage: '',\n        timestamp: new Date().toISOString(),\n      };\n\n      // Send initial message to create thread\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          config: {\n            configurable: {\n              thread_id,\n              model: \"gpt-4\"\n            }\n          },\n          messages: []\n        }));\n      }\n\n      setThreads(prev => [newThread, ...prev]);\n      setCurrentThreadId(newThread.id);\n      return newThread.id;\n    } catch (error) {\n      console.error('Error creating new thread:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadThreadHistory = async (threadId: string) => {\n    if (!threadId) return;\n    setIsLoading(true);\n    try {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          config: {\n            configurable: {\n              thread_id: threadId\n            }\n          },\n          type: 'get_messages'\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading thread history:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteThread = async (threadId: string) => {\n    if (!threadId) return false;\n    setIsLoading(true);\n    try {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          config: {\n            configurable: {\n              thread_id: threadId\n            }\n          },\n          type: 'delete_thread'\n        }));\n      }\n      setThreads(prev => prev.filter(thread => thread.id !== threadId));\n      if (currentThreadId === threadId) {\n        setCurrentThreadId(null);\n      }\n      return true;\n    } catch (error) {\n      console.error('Error deleting thread:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadThreads = async () => {\n    setIsLoading(true);\n    try {\n      if (wsRef.current?.readyState === WebSocket.OPEN) {\n        wsRef.current.send(JSON.stringify({\n          type: 'list_threads'\n        }));\n      }\n    } catch (error) {\n      console.error('Error loading threads:', error);\n      setThreads([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle WebSocket messages\n  useEffect(() => {\n    if (!wsRef.current) return;\n\n    wsRef.current.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'threads') {\n        // Handle thread list\n        const formattedThreads = data.threads.map((thread: any) => ({\n          id: thread.thread_id,\n          title: `Chat ${thread.message_count || 1}`,\n          lastMessage: thread.last_message?.content || '',\n          timestamp: new Date().toISOString(),\n        }));\n        setThreads(formattedThreads);\n      } else if (data.type === 'messages') {\n        // Handle thread messages\n        const messages = data.messages || [];\n        if (messages.length > 0) {\n          setThreads(prev => prev.map(thread => {\n            if (thread.id === currentThreadId) {\n              const lastMsg = messages[messages.length - 1];\n              return {\n                ...thread,\n                lastMessage: lastMsg.content,\n                timestamp: new Date().toISOString(),\n              };\n            }\n            return thread;\n          }));\n        }\n      }\n    };\n  }, [currentThreadId]);\n\n  const value: ThreadContextType = {\n    threads,\n    currentThreadId,\n    createNewThread,\n    loadThreadHistory,\n    deleteThread,\n    setCurrentThreadId,\n    loadThreads,\n    isLoading,\n  };\n\n  return (\n    <ThreadContext.Provider value={value}>\n      {children}\n    </ThreadContext.Provider>\n  );\n}\n\nexport function useThread() {\n  const context = useContext(ThreadContext);\n  if (context === undefined) {\n    throw new Error('useThread must be used within a ThreadProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}