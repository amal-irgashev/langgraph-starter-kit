{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ClientContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, ReactNode, useMemo } from 'react';\nimport { Client } from '@langchain/langgraph-sdk';\n\ninterface ClientContextType {\n  client: Client | null;\n}\n\nconst ClientContext = createContext<ClientContextType>({ client: null });\n\ninterface ClientProviderProps {\n  children: ReactNode;\n  config: {\n    apiUrl: string;\n    apiKey?: string;\n  };\n}\n\nexport function ClientProvider({ children, config }: ClientProviderProps) {\n  // Memoize the client instance to prevent unnecessary re-renders\n  const client = useMemo(() => new Client(config), [config]);\n\n  return (\n    <ClientContext.Provider value={{ client }}>\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useClient() {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within a ClientProvider');\n  }\n  return context.client;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AAHA;;;;AASA,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAqB;IAAE,QAAQ;AAAK;AAU/D,SAAS,eAAe,EAAE,QAAQ,EAAE,MAAM,EAAuB;IACtE,gEAAgE;IAChE,MAAM,SAAS,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE,IAAM,IAAI,iKAAA,CAAA,SAAM,CAAC,SAAS;QAAC;KAAO;IAEzD,qBACE,8OAAC,cAAc,QAAQ;QAAC,OAAO;YAAE;QAAO;kBACrC;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,QAAQ,MAAM;AACvB"}},
    {"offset": {"line": 53, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ChatContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, ReactNode } from 'react';\nimport { Message, RawMessage } from '@/types/chat';\n\ninterface ChatContextType {\n  messages: Message[];\n  rawMessages: RawMessage[];\n  addMessage: (message: Message) => void;\n  addRawMessage: (message: RawMessage) => void;\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n  streamingContent: string;\n  setStreamingContent: (content: string) => void;\n  clearRawMessages: () => void;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\ninterface ChatProviderProps {\n  children: ReactNode;\n}\n\nexport function ChatProvider({ children }: ChatProviderProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [rawMessages, setRawMessages] = useState<RawMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [streamingContent, setStreamingContent] = useState<string>('');\n\n  const addMessage = (message: Message) => {\n    setMessages((prev) => {\n      // For user messages, always add them\n      if (message.role === 'user') {\n        return [...prev, message];\n      }\n\n      // For assistant messages, check if it's a duplicate\n      const lastMessage = prev[prev.length - 1];\n      if (lastMessage?.role === 'assistant' && lastMessage?.content === message.content) {\n        return prev;\n      }\n\n      return [...prev, message];\n    });\n  };\n\n  const addRawMessage = (message: RawMessage) => {\n    setRawMessages(prev => [...prev, message]);\n  };\n\n  const clearRawMessages = () => {\n    setRawMessages([]);\n  };\n\n  const value = {\n    messages,\n    rawMessages,\n    addMessage,\n    addRawMessage,\n    isLoading,\n    setIsLoading,\n    streamingContent,\n    setStreamingContent,\n    clearRawMessages\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n}\n\nexport function useChat() {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAEA;AAFA;;;AAiBA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAMxD,SAAS,aAAa,EAAE,QAAQ,EAAqB;IAC1D,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAU;IAEjE,MAAM,aAAa,CAAC;QAClB,YAAY,CAAC;YACX,qCAAqC;YACrC,IAAI,QAAQ,IAAI,KAAK,QAAQ;gBAC3B,OAAO;uBAAI;oBAAM;iBAAQ;YAC3B;YAEA,oDAAoD;YACpD,MAAM,cAAc,IAAI,CAAC,KAAK,MAAM,GAAG,EAAE;YACzC,IAAI,aAAa,SAAS,eAAe,aAAa,YAAY,QAAQ,OAAO,EAAE;gBACjF,OAAO;YACT;YAEA,OAAO;mBAAI;gBAAM;aAAQ;QAC3B;IACF;IAEA,MAAM,gBAAgB,CAAC;QACrB,eAAe,CAAA,OAAQ;mBAAI;gBAAM;aAAQ;IAC3C;IAEA,MAAM,mBAAmB;QACvB,eAAe,EAAE;IACnB;IAEA,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;kBAC1B;;;;;;AAGP;AAEO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}