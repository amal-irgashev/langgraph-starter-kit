{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/hooks/useChatActions.ts"],"sourcesContent":["'use client';\n\nimport { useClient } from '../contexts/ClientContext';\nimport { useChat, Message } from '../contexts/ChatContext';\nimport { useCallback, useEffect, useState } from 'react';\n\n// Update the payload type to match LangGraph's expectations\ninterface StreamPayload {\n  input: {\n    messages: Message[];\n  };\n  streamMode?: Array<'events' | 'messages'>;\n}\n\nexport function useChatActions() {\n  const client = useClient();\n  const { addMessage, setIsLoading, addEvent } = useChat();\n  const [threadId, setThreadId] = useState<string | null>(null);\n  const [assistantId, setAssistantId] = useState<string | null>(null);\n\n  // Initialize thread and get default assistant on first load\n  useEffect(() => {\n    async function init() {\n      if (!client) return;\n      \n      try {\n        // Create a new thread\n        const thread = await client.threads.create();\n        setThreadId(thread.thread_id);\n\n        // Get the first available assistant\n        const assistants = await client.assistants.search();\n        if (assistants.length > 0) {\n          setAssistantId(assistants[0].assistant_id);\n        }\n      } catch (error) {\n        console.error('Error initializing chat:', error);\n      }\n    }\n    init();\n  }, [client]);\n\n  const sendMessage = useCallback(async (content: string) => {\n    if (!content.trim() || !client || !threadId || !assistantId) return;\n\n    // Add user message\n    const userMessage: Message = {\n      role: 'user',\n      content,\n    };\n    addMessage(userMessage);\n    setIsLoading(true);\n\n    try {\n      // Create the stream with the correct message format\n      const stream = await client.runs.stream(threadId, assistantId, {\n        input: {\n          messages: [userMessage]\n        },\n        streamMode: ['events', 'messages']\n      });\n\n      // Process the stream\n      for await (const chunk of stream) {\n        addEvent(chunk);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [client, threadId, assistantId, addMessage, setIsLoading, addEvent]);\n\n  return {\n    sendMessage,\n    ready: Boolean(client && threadId && assistantId)\n  };\n} "],"names":[],"mappings":";;;AAEA;AACA;AACA;AAJA;;;;AAcO,SAAS;IACd,MAAM,SAAS,CAAA,GAAA,0HAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,wHAAA,CAAA,UAAO,AAAD;IACrD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACxD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE9D,4DAA4D;IAC5D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,eAAe;YACb,IAAI,CAAC,QAAQ;YAEb,IAAI;gBACF,sBAAsB;gBACtB,MAAM,SAAS,MAAM,OAAO,OAAO,CAAC,MAAM;gBAC1C,YAAY,OAAO,SAAS;gBAE5B,oCAAoC;gBACpC,MAAM,aAAa,MAAM,OAAO,UAAU,CAAC,MAAM;gBACjD,IAAI,WAAW,MAAM,GAAG,GAAG;oBACzB,eAAe,UAAU,CAAC,EAAE,CAAC,YAAY;gBAC3C;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,4BAA4B;YAC5C;QACF;QACA;IACF,GAAG;QAAC;KAAO;IAEX,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACrC,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,aAAa;QAE7D,mBAAmB;QACnB,MAAM,cAAuB;YAC3B,MAAM;YACN;QACF;QACA,WAAW;QACX,aAAa;QAEb,IAAI;YACF,oDAAoD;YACpD,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,aAAa;gBAC7D,OAAO;oBACL,UAAU;wBAAC;qBAAY;gBACzB;gBACA,YAAY;oBAAC;oBAAU;iBAAW;YACpC;YAEA,qBAAqB;YACrB,WAAW,MAAM,SAAS,OAAQ;gBAChC,SAAS;YACX;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;QAC1C,SAAU;YACR,aAAa;QACf;IACF,GAAG;QAAC;QAAQ;QAAU;QAAa;QAAY;QAAc;KAAS;IAEtE,OAAO;QACL;QACA,OAAO,QAAQ,UAAU,YAAY;IACvC;AACF"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/components/ChatTest.tsx"],"sourcesContent":["// Chat Test Component to test the chat functionality\n\n'use client';\n\nimport { useChat } from '../contexts/ChatContext';\nimport { useChatActions } from '../hooks/useChatActions';\nimport { useEffect, useState } from 'react';\n\nexport function ChatTest() {\n  const { messages, isLoading, events } = useChat();\n  const { sendMessage, ready } = useChatActions();\n  const [status, setStatus] = useState<string>('Initializing...');\n  const [userInput, setUserInput] = useState<string>('');\n\n  useEffect(() => {\n    if (ready) {\n      setStatus('Ready');\n    }\n  }, [ready]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!ready || !userInput.trim()) return;\n    await sendMessage(userInput);\n    setUserInput('');\n  };\n\n  // Get the latest chain end event for the final answer\n  const latestChainEndEvent = events\n    .slice()\n    .reverse()\n    .find(event => event.data?.event === 'on_chain_end');\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4 space-y-6\">\n      {/* Status Bar */}\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-lg font-medium text-gray-700\">LangGraph Test</h2>\n        <span className={`text-sm px-2 py-1 rounded ${ready ? 'bg-green-50 text-green-700' : 'bg-yellow-50 text-yellow-700'}`}>\n          {status}\n        </span>\n      </div>\n\n      {/* Input Section */}\n      <form onSubmit={handleSubmit} className=\"flex gap-2\">\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n          placeholder=\"Ask a question...\"\n          className=\"flex-1 px-3 py-2 border rounded focus:outline-none focus:ring-1 focus:ring-blue-500\"\n          disabled={!ready || isLoading}\n        />\n        <button\n          type=\"submit\"\n          disabled={!ready || isLoading || !userInput.trim()}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50\"\n        >\n          {isLoading ? '...' : 'Send'}\n        </button>\n      </form>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        {/* Event Stream Panel */}\n        <div className=\"border rounded-lg p-4 bg-gray-50\">\n          <h3 className=\"text-sm font-medium text-gray-600 mb-3\">Agent Stream</h3>\n          <div className=\"space-y-2 h-[500px] overflow-y-auto\">\n            {events.map((event, idx) => {\n              const isChainStart = event.data?.event === 'on_chain_start';\n              const isChainEnd = event.data?.event === 'on_chain_end';\n              const isStream = event.data?.event === 'on_chain_stream';\n              \n              // Only show stream events where the message is from the AI\n              const message = event.data?.data?.chunk?.messages?.[0];\n              const isAIMessage = message?.type === 'ai';\n              \n              if (isStream && isAIMessage) {\n                return (\n                  <div\n                    key={idx}\n                    className=\"p-2 rounded text-sm bg-yellow-50 text-yellow-700\"\n                  >\n                    <div className=\"flex justify-between items-center mb-1\">\n                      <span className=\"text-xs font-medium\">Agent Thinking</span>\n                      <span className=\"text-xs opacity-70\">\n                        {event.data?.metadata?.langgraph_node || 'agent'}\n                      </span>\n                    </div>\n                    <p className=\"text-xs whitespace-pre-wrap\">\n                      {message.content || 'Processing...'}\n                    </p>\n                  </div>\n                );\n              }\n              return null;\n            })}\n          </div>\n        </div>\n\n        {/* Final Answer Panel */}\n        <div className=\"border rounded-lg p-4\">\n          <h3 className=\"text-sm font-medium text-gray-600 mb-3\">Final Answer</h3>\n          <div className=\"h-[500px] overflow-y-auto\">\n            {messages.map((msg, idx) => (\n              <div key={idx} className=\"mb-4\">\n                <p className=\"text-xs font-medium text-gray-500 mb-1\">\n                  {msg.role === 'user' ? 'Question' : 'Answer'}\n                </p>\n                <p className=\"text-sm whitespace-pre-wrap\">\n                  {msg.content}\n                </p>\n              </div>\n            ))}\n            {latestChainEndEvent && (\n              <div className=\"mt-2 p-2 bg-green-50 rounded\">\n                <p className=\"text-xs font-medium text-green-700\">Latest Response</p>\n                <p className=\"text-sm whitespace-pre-wrap\">\n                  {latestChainEndEvent.data.data.output?.messages?.[0]?.content}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}