{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/hooks/useChatActions.ts"],"sourcesContent":["'use client';\n\nimport { useClient } from '../contexts/ClientContext';\nimport { useChat, Message } from '../contexts/ChatContext';\nimport { useCallback, useEffect, useState } from 'react';\n\n// Update the payload type to match LangGraph's expectations\ninterface StreamPayload {\n  input: {\n    messages: Message[];\n  };\n  streamMode?: Array<'events' | 'messages'>;\n}\n\nexport function useChatActions() {\n  const client = useClient();\n  const { addMessage, setIsLoading, addEvent } = useChat();\n  const [threadId, setThreadId] = useState<string | null>(null);\n  const [assistantId, setAssistantId] = useState<string | null>(null);\n\n  // Initialize thread and get default assistant on first load\n  useEffect(() => {\n    async function init() {\n      if (!client) return;\n      \n      try {\n        // Create a new thread\n        const thread = await client.threads.create();\n        setThreadId(thread.thread_id);\n\n        // Get the first available assistant\n        const assistants = await client.assistants.search();\n        if (assistants.length > 0) {\n          setAssistantId(assistants[0].assistant_id);\n        }\n      } catch (error) {\n        console.error('Error initializing chat:', error);\n      }\n    }\n    init();\n  }, [client]);\n\n  const sendMessage = useCallback(async (content: string) => {\n    if (!content.trim() || !client || !threadId || !assistantId) return;\n\n    // Add user message\n    const userMessage: Message = {\n      role: 'user',\n      content,\n    };\n    addMessage(userMessage);\n    setIsLoading(true);\n\n    try {\n      // Create the stream with the correct message format\n      const stream = await client.runs.stream(threadId, assistantId, {\n        input: {\n          messages: [userMessage]\n        },\n        streamMode: ['events', 'messages']\n      });\n\n      // Process the stream\n      for await (const chunk of stream) {\n        addEvent(chunk);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [client, threadId, assistantId, addMessage, setIsLoading, addEvent]);\n\n  return {\n    sendMessage,\n    ready: Boolean(client && threadId && assistantId)\n  };\n} "],"names":[],"mappings":";;;AAEA;AACA;AACA;AAJA;;;;AAcO,SAAS;IACd,MAAM,SAAS,CAAA,GAAA,0HAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,wHAAA,CAAA,UAAO,AAAD;IACrD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACxD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE9D,4DAA4D;IAC5D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,eAAe;YACb,IAAI,CAAC,QAAQ;YAEb,IAAI;gBACF,sBAAsB;gBACtB,MAAM,SAAS,MAAM,OAAO,OAAO,CAAC,MAAM;gBAC1C,YAAY,OAAO,SAAS;gBAE5B,oCAAoC;gBACpC,MAAM,aAAa,MAAM,OAAO,UAAU,CAAC,MAAM;gBACjD,IAAI,WAAW,MAAM,GAAG,GAAG;oBACzB,eAAe,UAAU,CAAC,EAAE,CAAC,YAAY;gBAC3C;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,4BAA4B;YAC5C;QACF;QACA;IACF,GAAG;QAAC;KAAO;IAEX,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACrC,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,aAAa;QAE7D,mBAAmB;QACnB,MAAM,cAAuB;YAC3B,MAAM;YACN;QACF;QACA,WAAW;QACX,aAAa;QAEb,IAAI;YACF,oDAAoD;YACpD,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,aAAa;gBAC7D,OAAO;oBACL,UAAU;wBAAC;qBAAY;gBACzB;gBACA,YAAY;oBAAC;oBAAU;iBAAW;YACpC;YAEA,qBAAqB;YACrB,WAAW,MAAM,SAAS,OAAQ;gBAChC,SAAS;YACX;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;QAC1C,SAAU;YACR,aAAa;QACf;IACF,GAAG;QAAC;QAAQ;QAAU;QAAa;QAAY;QAAc;KAAS;IAEtE,OAAO;QACL;QACA,OAAO,QAAQ,UAAU,YAAY;IACvC;AACF"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 93, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/components/ChatComponent.tsx"],"sourcesContent":["'use client';\n\nimport { useChat } from '../contexts/ChatContext';\nimport { useChatActions } from '../hooks/useChatActions';\nimport { useState } from 'react';\n\ninterface Thread {\n  id: string;\n  title: string;\n  lastMessage: string;\n  timestamp: string;\n}\n\nexport function ChatComponent() {\n  const { messages, isLoading, events } = useChat();\n  const { sendMessage, ready } = useChatActions();\n  const [userInput, setUserInput] = useState<string>('');\n  \n  // Mock threads data - in real app, this would come from your backend\n  const [threads] = useState<Thread[]>([\n    {\n      id: '1',\n      title: 'Understanding LangGraph',\n      lastMessage: 'Tell me about LangGraph architecture',\n      timestamp: '2m ago'\n    },\n    {\n      id: '2',\n      title: 'Building Agents',\n      lastMessage: 'How do I create a custom agent?',\n      timestamp: '1h ago'\n    }\n  ]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!ready || !userInput.trim()) return;\n    await sendMessage(userInput);\n    setUserInput('');\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Threads Sidebar */}\n      <div className=\"w-64 bg-white border-r border-gray-200 flex flex-col\">\n        <div className=\"p-4 border-b border-gray-200\">\n          <button className=\"w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\">\n            New Chat\n          </button>\n        </div>\n        <div className=\"flex-1 overflow-y-auto\">\n          {threads.map((thread) => (\n            <div\n              key={thread.id}\n              className=\"p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-100\"\n            >\n              <h3 className=\"text-sm font-medium text-gray-900 truncate\">\n                {thread.title}\n              </h3>\n              <p className=\"text-xs text-gray-500 mt-1 truncate\">\n                {thread.lastMessage}\n              </p>\n              <span className=\"text-xs text-gray-400 mt-1\">\n                {thread.timestamp}\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {/* Chat Messages */}\n        <div className=\"flex-1 overflow-y-auto p-4 space-y-6\">\n          {messages.map((msg, idx) => (\n            <div\n              key={idx}\n              className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}\n            >\n              <div\n                className={`max-w-2xl rounded-2xl px-4 py-3 ${\n                  msg.role === 'user'\n                    ? 'bg-blue-500 text-white'\n                    : 'bg-white border border-gray-200'\n                }`}\n              >\n                <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n              </div>\n            </div>\n          ))}\n          {/* Agent Thinking Indicator */}\n          {isLoading && (\n            <div className=\"flex items-center space-x-2 text-gray-500 text-sm\">\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse\"></div>\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-75\"></div>\n              <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-pulse delay-150\"></div>\n              <span className=\"text-xs\">Agent is thinking...</span>\n            </div>\n          )}\n        </div>\n\n        {/* Stream Panel (Collapsible) */}\n        {events.length > 0 && (\n          <div className=\"bg-gray-50 border-t border-gray-200 p-2\">\n            <div className=\"max-h-32 overflow-y-auto space-y-2\">\n              {events.map((event, idx) => {\n                if (event.data?.event === 'on_chain_stream' && \n                    event.data?.data?.chunk?.messages?.[0]?.type === 'ai') {\n                  return (\n                    <div key={idx} className=\"text-xs text-gray-600 font-mono\">\n                      {event.data.data.chunk.messages[0].content}\n                    </div>\n                  );\n                }\n                return null;\n              })}\n            </div>\n          </div>\n        )}\n\n        {/* Input Area */}\n        <div className=\"border-t border-gray-200 p-4 bg-white\">\n          <form onSubmit={handleSubmit} className=\"flex space-x-4\">\n            <input\n              type=\"text\"\n              value={userInput}\n              onChange={(e) => setUserInput(e.target.value)}\n              placeholder=\"Message LangGraph...\"\n              className=\"flex-1 px-4 py-2 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              disabled={!ready || isLoading}\n            />\n            <button\n              type=\"submit\"\n              disabled={!ready || isLoading || !userInput.trim()}\n              className=\"px-6 py-2 bg-blue-500 text-white rounded-xl hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n            >\n              {isLoading ? (\n                <span className=\"flex items-center space-x-2\">\n                  <span className=\"w-1.5 h-1.5 bg-white rounded-full animate-ping\"></span>\n                  <span className=\"w-1.5 h-1.5 bg-white rounded-full animate-ping delay-75\"></span>\n                  <span className=\"w-1.5 h-1.5 bg-white rounded-full animate-ping delay-150\"></span>\n                </span>\n              ) : (\n                'Send'\n              )}\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}