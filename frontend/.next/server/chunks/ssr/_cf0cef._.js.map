{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/hooks/useChatActions.ts"],"sourcesContent":["'use client';\n\nimport { useClient } from '../contexts/ClientContext';\nimport { useChat, Message } from '../contexts/ChatContext';\nimport { useCallback, useEffect, useState } from 'react';\n\n// Update the payload type to match LangGraph's expectations\ninterface StreamPayload {\n  input: {\n    messages: Message[];\n  };\n  streamMode?: Array<'events' | 'messages'>;\n}\n\nexport function useChatActions() {\n  const client = useClient();\n  const { addMessage, setIsLoading, addEvent } = useChat();\n  const [threadId, setThreadId] = useState<string | null>(null);\n  const [assistantId, setAssistantId] = useState<string | null>(null);\n\n  // Initialize thread and get default assistant on first load\n  useEffect(() => {\n    async function init() {\n      if (!client) return;\n      \n      try {\n        // Create a new thread\n        const thread = await client.threads.create();\n        setThreadId(thread.thread_id);\n\n        // Get the first available assistant\n        const assistants = await client.assistants.search();\n        if (assistants.length > 0) {\n          setAssistantId(assistants[0].assistant_id);\n        }\n      } catch (error) {\n        console.error('Error initializing chat:', error);\n      }\n    }\n    init();\n  }, [client]);\n\n  const sendMessage = useCallback(async (content: string) => {\n    if (!content.trim() || !client || !threadId || !assistantId) return;\n\n    // Add user message\n    const userMessage: Message = {\n      role: 'user',\n      content,\n    };\n    addMessage(userMessage);\n    setIsLoading(true);\n\n    try {\n      // Create the stream with the correct message format\n      const stream = await client.runs.stream(threadId, assistantId, {\n        input: {\n          messages: [userMessage]\n        },\n        streamMode: ['events', 'messages']\n      });\n\n      // Process the stream\n      for await (const chunk of stream) {\n        addEvent(chunk);\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [client, threadId, assistantId, addMessage, setIsLoading, addEvent]);\n\n  return {\n    sendMessage,\n    ready: Boolean(client && threadId && assistantId)\n  };\n} "],"names":[],"mappings":";;;AAEA;AACA;AACA;AAJA;;;;AAcO,SAAS;IACd,MAAM,SAAS,CAAA,GAAA,0HAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,wHAAA,CAAA,UAAO,AAAD;IACrD,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IACxD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE9D,4DAA4D;IAC5D,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,eAAe;YACb,IAAI,CAAC,QAAQ;YAEb,IAAI;gBACF,sBAAsB;gBACtB,MAAM,SAAS,MAAM,OAAO,OAAO,CAAC,MAAM;gBAC1C,YAAY,OAAO,SAAS;gBAE5B,oCAAoC;gBACpC,MAAM,aAAa,MAAM,OAAO,UAAU,CAAC,MAAM;gBACjD,IAAI,WAAW,MAAM,GAAG,GAAG;oBACzB,eAAe,UAAU,CAAC,EAAE,CAAC,YAAY;gBAC3C;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,4BAA4B;YAC5C;QACF;QACA;IACF,GAAG;QAAC;KAAO;IAEX,MAAM,cAAc,CAAA,GAAA,qMAAA,CAAA,cAAW,AAAD,EAAE,OAAO;QACrC,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,aAAa;QAE7D,mBAAmB;QACnB,MAAM,cAAuB;YAC3B,MAAM;YACN;QACF;QACA,WAAW;QACX,aAAa;QAEb,IAAI;YACF,oDAAoD;YACpD,MAAM,SAAS,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,aAAa;gBAC7D,OAAO;oBACL,UAAU;wBAAC;qBAAY;gBACzB;gBACA,YAAY;oBAAC;oBAAU;iBAAW;YACpC;YAEA,qBAAqB;YACrB,WAAW,MAAM,SAAS,OAAQ;gBAChC,SAAS;YACX;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;QAC1C,SAAU;YACR,aAAa;QACf;IACF,GAAG;QAAC;QAAQ;QAAU;QAAa;QAAY;QAAc;KAAS;IAEtE,OAAO;QACL;QACA,OAAO,QAAQ,UAAU,YAAY;IACvC;AACF"}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}