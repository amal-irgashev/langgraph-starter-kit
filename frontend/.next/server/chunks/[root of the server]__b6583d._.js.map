{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/app/api/messages/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { thread_id, message } = await request.json();\n\n    if (!thread_id) {\n      return NextResponse.json(\n        { error: 'Thread ID is required' },\n        { status: 400 }\n      );\n    }\n\n    if (!message) {\n      return NextResponse.json(\n        { error: 'Message content is required' },\n        { status: 400 }\n      );\n    }\n\n    const apiUrl = process.env.NEXT_PUBLIC_LANGGRAPH_API_URL;\n    if (!apiUrl) {\n      throw new Error('LangGraph API URL is not configured');\n    }\n\n    // Send message to LangGraph\n    const response = await fetch(`${apiUrl}/threads/${thread_id}/state`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        messages: [{\n          role: \"user\",\n          content: message\n        }]\n      }),\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      console.error('Error from LangGraph:', error);\n      throw new Error(`Failed to send message to LangGraph: ${error}`);\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error sending message:', error);\n    return NextResponse.json(\n      { \n        error: error instanceof Error ? error.message : 'Failed to send message',\n        code: 'MESSAGE_SEND_FAILED'\n      },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEjD,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAwB,GACjC;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM;QACN,uCAAa;;QAEb;QAEA,4BAA4B;QAC5B,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,SAAS,EAAE,UAAU,MAAM,CAAC,EAAE;YACnE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,UAAU;oBAAC;wBACT,MAAM;wBACN,SAAS;oBACX;iBAAE;YACJ;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,QAAQ,MAAM,SAAS,IAAI;YACjC,QAAQ,KAAK,CAAC,yBAAyB;YACvC,MAAM,IAAI,MAAM,CAAC,qCAAqC,EAAE,OAAO;QACjE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,MAAM;QACR,GACA;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}