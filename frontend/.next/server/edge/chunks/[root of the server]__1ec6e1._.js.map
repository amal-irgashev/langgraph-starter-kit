{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/api/stream/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\n\nexport const runtime = 'edge';\n\nexport async function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams;\n  const threadId = searchParams.get('thread_id');\n  const streamMode = searchParams.get('stream_mode') || 'messages';\n\n  console.log('Stream request params:', { threadId, streamMode });\n\n  if (!threadId) {\n    return new Response(\n      JSON.stringify({ error: 'Thread ID is required' }),\n      {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n\n  try {\n    const apiUrl = process.env.NEXT_PUBLIC_LANGGRAPH_API_URL;\n    if (!apiUrl) {\n      throw new Error('LangGraph API URL is not configured');\n    }\n\n    console.log('Using LangGraph API URL:', apiUrl);\n\n    const url = new URL(`${apiUrl}/runs/stream`);\n    \n    console.log('Making request to:', url.toString());\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        'Connection': 'keep-alive',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        configurable: {\n          thread_id: threadId\n        },\n        streamMode: \"messages\",\n        messages: [{\n          role: \"user\",\n          content: \"Hello\"\n        }]\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Stream response error:', {\n        status: response.status,\n        statusText: response.statusText,\n        body: errorText\n      });\n      throw new Error(`Failed to establish SSE connection: ${response.status} ${response.statusText}`);\n    }\n\n    // Create a TransformStream to modify the response\n    const transformStream = new TransformStream({\n      transform(chunk, controller) {\n        // Forward the chunk as is\n        controller.enqueue(chunk);\n      },\n    });\n\n    return new Response(\n      response.body?.pipeThrough(transformStream),\n      {\n        headers: {\n          'Content-Type': 'text/event-stream',\n          'Cache-Control': 'no-cache',\n          'Connection': 'keep-alive',\n        },\n      }\n    );\n  } catch (error) {\n    console.error('Error establishing SSE connection:', error);\n    return new Response(\n      JSON.stringify({ \n        error: error instanceof Error ? error.message : 'Failed to establish SSE connection',\n        code: 'SSE_CONNECTION_FAILED',\n        details: error instanceof Error ? error.stack : undefined\n      }),\n      {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n} "],"names":[],"mappings":";;;;AAEO,MAAM,UAAU;AAEhB,eAAe,IAAI,OAAoB;IAC5C,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;IACjD,MAAM,WAAW,aAAa,GAAG,CAAC;IAClC,MAAM,aAAa,aAAa,GAAG,CAAC,kBAAkB;IAEtD,QAAQ,GAAG,CAAC,0BAA0B;QAAE;QAAU;IAAW;IAE7D,IAAI,CAAC,UAAU;QACb,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YAAE,OAAO;QAAwB,IAChD;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;IAEJ;IAEA,IAAI;QACF,MAAM;QACN,uCAAa;;QAEb;QAEA,QAAQ,GAAG,CAAC,4BAA4B;QAExC,MAAM,MAAM,IAAI,IAAI,GAAG,OAAO,YAAY,CAAC;QAE3C,QAAQ,GAAG,CAAC,sBAAsB,IAAI,QAAQ;QAE9C,MAAM,WAAW,MAAM,MAAM,KAAK;YAChC,QAAQ;YACR,SAAS;gBACP,UAAU;gBACV,iBAAiB;gBACjB,cAAc;gBACd,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB,cAAc;oBACZ,WAAW;gBACb;gBACA,YAAY;gBACZ,UAAU;oBAAC;wBACT,MAAM;wBACN,SAAS;oBACX;iBAAE;YACJ;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,0BAA0B;gBACtC,QAAQ,SAAS,MAAM;gBACvB,YAAY,SAAS,UAAU;gBAC/B,MAAM;YACR;YACA,MAAM,IAAI,MAAM,CAAC,oCAAoC,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;QACjG;QAEA,kDAAkD;QAClD,MAAM,kBAAkB,IAAI,gBAAgB;YAC1C,WAAU,KAAK,EAAE,UAAU;gBACzB,0BAA0B;gBAC1B,WAAW,OAAO,CAAC;YACrB;QACF;QAEA,OAAO,IAAI,SACT,SAAS,IAAI,EAAE,YAAY,kBAC3B;YACE,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,cAAc;YAChB;QACF;IAEJ,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;YACb,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAChD,MAAM;YACN,SAAS,iBAAiB,QAAQ,MAAM,KAAK,GAAG;QAClD,IACA;YACE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;IAEJ;AACF"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}