{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ClientContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, ReactNode, useMemo } from 'react';\nimport { Client } from '@langchain/langgraph-sdk';\n\ninterface ClientContextType {\n  client: Client | null;\n}\n\nconst ClientContext = createContext<ClientContextType>({ client: null });\n\ninterface ClientProviderProps {\n  children: ReactNode;\n  config: {\n    apiUrl: string;\n    apiKey?: string;\n  };\n}\n\nexport function ClientProvider({ children, config }: ClientProviderProps) {\n  // Memoize the client instance to prevent unnecessary re-renders\n  const client = useMemo(() => new Client(config), [config]);\n\n  return (\n    <ClientContext.Provider value={{ client }}>\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useClient() {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within a ClientProvider');\n  }\n  return context.client;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;;;AAHA;;;AASA,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAqB;IAAE,QAAQ;AAAK;AAU/D,SAAS,eAAe,EAAE,QAAQ,EAAE,MAAM,EAAuB;;IACtE,gEAAgE;IAChE,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;0CAAE,IAAM,IAAI,oKAAA,CAAA,SAAM,CAAC;yCAAS;QAAC;KAAO;IAEzD,qBACE,6LAAC,cAAc,QAAQ;QAAC,OAAO;YAAE;QAAO;kBACrC;;;;;;AAGP;GATgB;KAAA;AAWT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,QAAQ,MAAM;AACvB;IANgB"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ChatContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { Message, RawMessage } from '@/types/chat';\nimport { useEventSource } from '@/hooks/useEventSource';\n\ninterface ChatContextType {\n  messages: Message[];\n  rawMessages: RawMessage[];\n  isLoading: boolean;\n  streamingContent: string;\n  addMessage: (message: Message) => void;\n  addRawMessage: (message: RawMessage) => void;\n  setIsLoading: (loading: boolean) => void;\n  setStreamingContent: (content: string) => void;\n  clearRawMessages: () => void;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport function ChatProvider({ children }: { children: React.ReactNode }) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [rawMessages, setRawMessages] = useState<RawMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [streamingContent, setStreamingContent] = useState('');\n\n  const addMessage = useCallback((message: Message) => {\n    setMessages(prev => [...prev, message]);\n  }, []);\n\n  const addRawMessage = useCallback((message: RawMessage) => {\n    setRawMessages(prev => [...prev, message]);\n  }, []);\n\n  const clearRawMessages = useCallback(() => {\n    setRawMessages([]);\n  }, []);\n\n  const value = {\n    messages,\n    rawMessages,\n    isLoading,\n    streamingContent,\n    addMessage,\n    addRawMessage,\n    setIsLoading,\n    setStreamingContent,\n    clearRawMessages,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n}\n\nexport function useChat() {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAkBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzD,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAAE,CAAC;YAC9B;wDAAY,CAAA,OAAQ;2BAAI;wBAAM;qBAAQ;;QACxC;+CAAG,EAAE;IAEL,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;mDAAE,CAAC;YACjC;2DAAe,CAAA,OAAQ;2BAAI;wBAAM;qBAAQ;;QAC3C;kDAAG,EAAE;IAEL,MAAM,mBAAmB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;sDAAE;YACnC,eAAe,EAAE;QACnB;qDAAG,EAAE;IAEL,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,6LAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;GA/BgB;KAAA;AAiCT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ThreadContext.tsx"],"sourcesContent":["'use client';\n\nimport React from 'react';\nimport { useClient } from './ClientContext';\n\ninterface Thread {\n  thread_id: string;\n  created_at: string;\n  messages: Array<{\n    role: string;\n    content: string;\n  }>;\n}\n\ninterface ThreadContextType {\n  threads: Thread[];\n  currentThreadId: string | null;\n  isLoading: boolean;\n  loadThreads: () => Promise<void>;\n  createNewThread: () => Promise<string>;\n  loadThreadHistory: (threadId: string) => Promise<void>;\n  deleteThread: (threadId: string) => Promise<void>;\n  setCurrentThreadId: (threadId: string | null) => void;\n}\n\nconst ThreadContext = React.createContext<ThreadContextType | null>(null);\n\nexport function ThreadProvider({ children }: { children: React.ReactNode }) {\n  const client = useClient();\n  const [threads, setThreads] = React.useState<Thread[]>([]);\n  const [currentThreadId, setCurrentThreadId] = React.useState<string | null>(null);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const loadThreads = React.useCallback(async () => {\n    if (!client) return;\n    \n    try {\n      setIsLoading(true);\n      const response = await client.threads.search();\n      const formattedThreads = response.map(thread => ({\n        thread_id: thread.thread_id,\n        created_at: thread.created_at || new Date().toISOString(),\n        messages: []\n      }));\n      setThreads(formattedThreads);\n      \n      // Load messages for each thread\n      await Promise.all(formattedThreads.map(thread => \n        loadThreadHistory(thread.thread_id)\n      ));\n    } catch (error) {\n      console.error('Error loading threads:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [client]);\n\n  const createNewThread = React.useCallback(async () => {\n    if (!client) throw new Error('Client not initialized');\n\n    try {\n      setIsLoading(true);\n      const response = await client.threads.create();\n      const newThread: Thread = {\n        thread_id: response.thread_id,\n        created_at: new Date().toISOString(),\n        messages: []\n      };\n      \n      setThreads(prev => [...prev, newThread]);\n      setCurrentThreadId(newThread.thread_id);\n      return newThread.thread_id;\n    } catch (error) {\n      console.error('Error creating thread:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [client]);\n\n  const loadThreadHistory = React.useCallback(async (threadId: string) => {\n    if (!client) return;\n\n    try {\n      const state = await client.threads.getState(threadId);\n      if (state.messages && state.messages.length > 0) {\n        setThreads(prev => prev.map(thread => {\n          if (thread.thread_id === threadId) {\n            return {\n              ...thread,\n              messages: state.messages\n            };\n          }\n          return thread;\n        }));\n      }\n    } catch (error) {\n      console.error(`Error loading thread history for ${threadId}:`, error);\n    }\n  }, [client]);\n\n  const deleteThread = React.useCallback(async (threadId: string) => {\n    if (!client) return;\n\n    try {\n      await client.threads.delete(threadId);\n      setThreads(prev => prev.filter(t => t.thread_id !== threadId));\n      if (currentThreadId === threadId) {\n        setCurrentThreadId(null);\n      }\n    } catch (error) {\n      console.error('Error deleting thread:', error);\n      throw error;\n    }\n  }, [client, currentThreadId]);\n\n  React.useEffect(() => {\n    if (client) {\n      loadThreads();\n    }\n  }, [client]);\n\n  const value = React.useMemo(() => ({\n    threads,\n    currentThreadId,\n    isLoading,\n    loadThreads,\n    createNewThread,\n    loadThreadHistory,\n    deleteThread,\n    setCurrentThreadId\n  }), [threads, currentThreadId, isLoading, loadThreads, createNewThread, loadThreadHistory, deleteThread]);\n\n  return (\n    <ThreadContext.Provider value={value}>\n      {children}\n    </ThreadContext.Provider>\n  );\n}\n\nexport function useThread() {\n  const context = React.useContext(ThreadContext);\n  if (!context) {\n    throw new Error('useThread must be used within a ThreadProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/AssistantContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useClient } from './ClientContext';\nimport type { Assistant as SDKAssistant } from '@langchain/langgraph-sdk';\n\ninterface AssistantContextType {\n  assistants: SDKAssistant[];\n  selectedAssistantId: string | null;\n  setSelectedAssistantId: (id: string | null) => void;\n  isLoading: boolean;\n  error: Error | null;\n}\n\nconst AssistantContext = createContext<AssistantContextType | undefined>(undefined);\n\nexport function AssistantProvider({ children }: { children: ReactNode }) {\n  const client = useClient();\n  const [assistants, setAssistants] = useState<SDKAssistant[]>([]);\n  const [selectedAssistantId, setSelectedAssistantId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    async function loadAssistants() {\n      if (!client) return;\n\n      try {\n        setIsLoading(true);\n        const data = await client.assistants.search();\n        setAssistants(data);\n        \n        // Auto-select the first assistant if none is selected\n        if (!selectedAssistantId && data.length > 0) {\n          setSelectedAssistantId(data[0].assistant_id);\n        }\n      } catch (err) {\n        setError(err instanceof Error ? err : new Error(String(err)));\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    loadAssistants();\n  }, [client, selectedAssistantId]);\n\n  return (\n    <AssistantContext.Provider\n      value={{\n        assistants,\n        selectedAssistantId,\n        setSelectedAssistantId,\n        isLoading,\n        error,\n      }}\n    >\n      {children}\n    </AssistantContext.Provider>\n  );\n}\n\nexport function useAssistant() {\n  const context = useContext(AssistantContext);\n  if (context === undefined) {\n    throw new Error('useAssistant must be used within an AssistantProvider');\n  }\n  return context;\n} "],"names":[],"mappings":";;;;;AAEA;AACA;;;AAHA;;;AAcA,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAoC;AAElE,SAAS,kBAAkB,EAAE,QAAQ,EAA2B;;IACrE,MAAM,SAAS,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB,EAAE;IAC/D,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC9E,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB;IAEjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;uCAAE;YACR,eAAe;gBACb,IAAI,CAAC,QAAQ;gBAEb,IAAI;oBACF,aAAa;oBACb,MAAM,OAAO,MAAM,OAAO,UAAU,CAAC,MAAM;oBAC3C,cAAc;oBAEd,sDAAsD;oBACtD,IAAI,CAAC,uBAAuB,KAAK,MAAM,GAAG,GAAG;wBAC3C,uBAAuB,IAAI,CAAC,EAAE,CAAC,YAAY;oBAC7C;gBACF,EAAE,OAAO,KAAK;oBACZ,SAAS,eAAe,QAAQ,MAAM,IAAI,MAAM,OAAO;gBACzD,SAAU;oBACR,aAAa;gBACf;YACF;YAEA;QACF;sCAAG;QAAC;QAAQ;KAAoB;IAEhC,qBACE,6LAAC,iBAAiB,QAAQ;QACxB,OAAO;YACL;YACA;YACA;YACA;YACA;QACF;kBAEC;;;;;;AAGP;GA3CgB;;QACC,6HAAA,CAAA,YAAS;;;KADV;AA6CT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB"}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}