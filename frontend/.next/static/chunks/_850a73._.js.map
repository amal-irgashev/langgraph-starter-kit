{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ClientContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, ReactNode, useMemo } from 'react';\nimport { Client } from '@langchain/langgraph-sdk';\n\ninterface ClientContextType {\n  client: Client | null;\n}\n\nconst ClientContext = createContext<ClientContextType>({ client: null });\n\ninterface ClientProviderProps {\n  children: ReactNode;\n  config: {\n    apiUrl: string;\n    apiKey?: string;\n  };\n}\n\nexport function ClientProvider({ children, config }: ClientProviderProps) {\n  // Memoize the client instance to prevent unnecessary re-renders\n  const client = useMemo(() => new Client(config), [config]);\n\n  return (\n    <ClientContext.Provider value={{ client }}>\n      {children}\n    </ClientContext.Provider>\n  );\n}\n\nexport function useClient() {\n  const context = useContext(ClientContext);\n  if (!context) {\n    throw new Error('useClient must be used within a ClientProvider');\n  }\n  return context.client;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;;;AAHA;;;AASA,MAAM,8BAAgB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAqB;IAAE,QAAQ;AAAK;AAU/D,SAAS,eAAe,EAAE,QAAQ,EAAE,MAAM,EAAuB;;IACtE,gEAAgE;IAChE,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,UAAO,AAAD;0CAAE,IAAM,IAAI,oKAAA,CAAA,SAAM,CAAC;yCAAS;QAAC;KAAO;IAEzD,qBACE,6LAAC,cAAc,QAAQ;QAAC,OAAO;YAAE;QAAO;kBACrC;;;;;;AAGP;GATgB;KAAA;AAWT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO,QAAQ,MAAM;AACvB;IANgB"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ChatContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { Message, RawMessage } from '@/types/chat';\nimport { useEventSource } from '@/hooks/useEventSource';\n\ninterface ChatContextType {\n  messages: Message[];\n  rawMessages: RawMessage[];\n  isLoading: boolean;\n  streamingContent: string;\n  addMessage: (message: Message) => void;\n  addRawMessage: (message: RawMessage) => void;\n  setIsLoading: (loading: boolean) => void;\n  setStreamingContent: (content: string) => void;\n  clearRawMessages: () => void;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\nexport function ChatProvider({ children }: { children: React.ReactNode }) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [rawMessages, setRawMessages] = useState<RawMessage[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [streamingContent, setStreamingContent] = useState('');\n\n  const addMessage = useCallback((message: Message) => {\n    setMessages(prev => [...prev, message]);\n  }, []);\n\n  const addRawMessage = useCallback((message: RawMessage) => {\n    setRawMessages(prev => [...prev, message]);\n  }, []);\n\n  const clearRawMessages = useCallback(() => {\n    setRawMessages([]);\n  }, []);\n\n  const value = {\n    messages,\n    rawMessages,\n    isLoading,\n    streamingContent,\n    addMessage,\n    addRawMessage,\n    setIsLoading,\n    setStreamingContent,\n    clearRawMessages,\n  };\n\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\n}\n\nexport function useChat() {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAkBA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAa,EAAE;IACtD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB,EAAE;IAC/D,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEzD,MAAM,aAAa,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAAE,CAAC;YAC9B;wDAAY,CAAA,OAAQ;2BAAI;wBAAM;qBAAQ;;QACxC;+CAAG,EAAE;IAEL,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;mDAAE,CAAC;YACjC;2DAAe,CAAA,OAAQ;2BAAI;wBAAM;qBAAQ;;QAC3C;kDAAG,EAAE;IAEL,MAAM,mBAAmB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;sDAAE;YACnC,eAAe,EAAE;QACnB;qDAAG,EAAE;IAEL,MAAM,QAAQ;QACZ;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IACF;IAEA,qBAAO,6LAAC,YAAY,QAAQ;QAAC,OAAO;kBAAQ;;;;;;AAC9C;GA/BgB;KAAA;AAiCT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB"}},
    {"offset": {"line": 142, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/AssistantContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useClient } from './ClientContext';\nimport type { Assistant as SDKAssistant } from '@langchain/langgraph-sdk';\n\ninterface AssistantContextType {\n  assistants: SDKAssistant[];\n  selectedAssistantId: string | null;\n  setSelectedAssistantId: (id: string | null) => void;\n  isLoading: boolean;\n  error: Error | null;\n}\n\nconst AssistantContext = createContext<AssistantContextType | undefined>(undefined);\n\nexport function AssistantProvider({ children }: { children: ReactNode }) {\n  const client = useClient();\n  const [assistants, setAssistants] = useState<SDKAssistant[]>([]);\n  const [selectedAssistantId, setSelectedAssistantId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    async function loadAssistants() {\n      if (!client) return;\n\n      try {\n        setIsLoading(true);\n        const data = await client.assistants.search();\n        setAssistants(data);\n        \n        // Auto-select the first assistant if none is selected\n        if (!selectedAssistantId && data.length > 0) {\n          setSelectedAssistantId(data[0].assistant_id);\n        }\n      } catch (err) {\n        setError(err instanceof Error ? err : new Error(String(err)));\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    loadAssistants();\n  }, [client, selectedAssistantId]);\n\n  return (\n    <AssistantContext.Provider\n      value={{\n        assistants,\n        selectedAssistantId,\n        setSelectedAssistantId,\n        isLoading,\n        error,\n      }}\n    >\n      {children}\n    </AssistantContext.Provider>\n  );\n}\n\nexport function useAssistant() {\n  const context = useContext(AssistantContext);\n  if (context === undefined) {\n    throw new Error('useAssistant must be used within an AssistantProvider');\n  }\n  return context;\n} "],"names":[],"mappings":";;;;;AAEA;AACA;;;AAHA;;;AAcA,MAAM,iCAAmB,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAoC;AAElE,SAAS,kBAAkB,EAAE,QAAQ,EAA2B;;IACrE,MAAM,SAAS,CAAA,GAAA,6HAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,YAAY,cAAc,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAkB,EAAE;IAC/D,MAAM,CAAC,qBAAqB,uBAAuB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAC9E,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAgB;IAEjD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;uCAAE;YACR,eAAe;gBACb,IAAI,CAAC,QAAQ;gBAEb,IAAI;oBACF,aAAa;oBACb,MAAM,OAAO,MAAM,OAAO,UAAU,CAAC,MAAM;oBAC3C,cAAc;oBAEd,sDAAsD;oBACtD,IAAI,CAAC,uBAAuB,KAAK,MAAM,GAAG,GAAG;wBAC3C,uBAAuB,IAAI,CAAC,EAAE,CAAC,YAAY;oBAC7C;gBACF,EAAE,OAAO,KAAK;oBACZ,SAAS,eAAe,QAAQ,MAAM,IAAI,MAAM,OAAO;gBACzD,SAAU;oBACR,aAAa;gBACf;YACF;YAEA;QACF;sCAAG;QAAC;QAAQ;KAAoB;IAEhC,qBACE,6LAAC,iBAAiB,QAAQ;QACxB,OAAO;YACL;YACA;YACA;YACA;YACA;QACF;kBAEC;;;;;;AAGP;GA3CgB;;QACC,6HAAA,CAAA,YAAS;;;KADV;AA6CT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB"}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file:///Users/sherahmedov/Dev/Portfolio/langgraph-starter-kit/frontend/contexts/ThreadContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useClient } from './ClientContext';\nimport { useAssistant } from './AssistantContext';\nimport { Thread, ThreadContextType } from '@/types/chat';\n\nconst ThreadContext = createContext<ThreadContextType | undefined>(undefined);\n\nexport function ThreadProvider({ children }: { children: ReactNode }) {\n  const client = useClient();\n  const { selectedAssistantId } = useAssistant();\n  const [threads, setThreads] = useState<Thread[]>([]);\n  const [currentThreadId, setCurrentThreadId] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load threads when the component mounts\n  useEffect(() => {\n    loadThreads();\n  }, []);\n\n  const loadThreads = async () => {\n    if (!client) return;\n\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/threads');\n      if (!response.ok) {\n        throw new Error('Failed to load threads');\n      }\n      const data = await response.json();\n      setThreads(data.threads || []);\n    } catch (error) {\n      console.error('Error loading threads:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const createNewThread = async () => {\n    if (!client || !selectedAssistantId) {\n      throw new Error('Client or assistant not initialized');\n    }\n\n    try {\n      setIsLoading(true);\n      const response = await fetch('/api/threads', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          assistant_id: selectedAssistantId,\n          metadata: {\n            assistant_id: selectedAssistantId,\n            created_at: new Date().toISOString()\n          }\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create thread');\n      }\n\n      const { thread_id } = await response.json();\n      setCurrentThreadId(thread_id);\n      await loadThreads(); // Refresh the threads list\n      return thread_id;\n    } catch (error) {\n      console.error('Error creating thread:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadThreadHistory = async (threadId: string) => {\n    if (!client) return;\n\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/threads/${threadId}/history`);\n      if (!response.ok) {\n        throw new Error('Failed to load thread history');\n      }\n      const { messages } = await response.json();\n      // Update the thread's messages in the threads array\n      setThreads(prevThreads => {\n        return prevThreads.map(thread => {\n          if (thread.thread_id === threadId) {\n            return { ...thread, messages };\n          }\n          return thread;\n        });\n      });\n    } catch (error) {\n      console.error('Error loading thread history:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteThread = async (threadId: string) => {\n    if (!client) return false;\n\n    try {\n      setIsLoading(true);\n      const response = await fetch(`/api/threads/${threadId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete thread');\n      }\n\n      // Remove the thread from the threads array\n      setThreads(prevThreads => prevThreads.filter(thread => thread.thread_id !== threadId));\n      \n      // If the deleted thread was the current thread, clear the current thread ID\n      if (currentThreadId === threadId) {\n        setCurrentThreadId(null);\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error deleting thread:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <ThreadContext.Provider\n      value={{\n        threads,\n        currentThreadId,\n        createNewThread,\n        loadThreadHistory,\n        deleteThread,\n        setCurrentThreadId,\n        loadThreads,\n        isLoading,\n      }}\n    >\n      {children}\n    </ThreadContext.Provider>\n  );\n}\n\nexport function useThread() {\n  const context = useContext(ThreadContext);\n  if (context === undefined) {\n    throw new Error('useThread must be used within a ThreadProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}